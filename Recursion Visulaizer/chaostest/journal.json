{
  "chaoslib-version": "1.21.0",
  "platform": "Windows-10-10.0.19042-SP0",
  "node": "LNAR-5CD9051V6X",
  "experiment": {
    "title": "Moving a file from under our feet is forgivable",
    "description": "Our application should re-create a file that was removed",
    "contributions": {
      "reliability": "high",
      "availability": "high"
    },
    "controls": [
      {
        "type": "probe",
        "name": "tracing",
        "scope": "before",
        "automatic": true,
        "provider": {
          "type": "python",
          "module": "chaostracing.control"
        }
      }
    ],
    "steady-state-hypothesis": {
      "title": "Validate Steady state",
      "probes": [
        {
          "name": "test-steady-state",
          "type": "probe",
          "tolerance": 200,
          "provider": {
            "type": "python",
            "module": "recursionVisualizer",
            "func": "steadystate",
            "arguments": {
              "i": 200
            }
          }
        }
      ]
    },
    "method": [
      {
        "name": "test-rightfunction-testturtlemodule",
        "type": "action",
        "provider": {
          "type": "python",
          "module": "turtletest",
          "func": "right",
          "arguments": {
            "angle": "40"
          }
        }
      },
      {
        "name": "test-configdict-testturtlemodule",
        "type": "action",
        "provider": {
          "type": "python",
          "module": "turtletest",
          "func": "config_dict",
          "arguments": {
            "filename": "turtletest.py"
          }
        }
      },
      {
        "type": "action",
        "name": "test-turtle-forward-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "forward",
          "arguments": {
            "distance": 20
          }
        },
        "pauses": {
          "after": 10
        }
      },
      {
        "type": "action",
        "name": "test-turtle-backward-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "backward",
          "arguments": {
            "distance": 20
          }
        },
        "pauses": {
          "after": 10
        }
      },
      {
        "type": "action",
        "name": "test-turtle-left-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "left",
          "arguments": {
            "angle": 45
          }
        },
        "pauses": {
          "after": 10
        }
      },
      {
        "type": "action",
        "name": "test-turtle-right-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "right",
          "arguments": {
            "angle": 45
          }
        },
        "pauses": {
          "after": 10
        }
      },
      {
        "ref": "test-steady-state"
      }
    ],
    "dry": false
  },
  "start": "2021-10-11T11:54:55.423298",
  "status": "completed",
  "deviated": false,
  "steady_states": {
    "before": {
      "steady_state_met": true,
      "probes": [
        {
          "activity": {
            "name": "test-steady-state",
            "type": "probe",
            "tolerance": 200,
            "provider": {
              "type": "python",
              "module": "recursionVisualizer",
              "func": "steadystate",
              "arguments": {
                "i": 200
              }
            }
          },
          "output": 200,
          "status": "succeeded",
          "start": "2021-10-11T11:54:55.425298",
          "end": "2021-10-11T11:54:55.443958",
          "duration": 0.01866,
          "tolerance_met": true
        }
      ]
    },
    "after": {
      "steady_state_met": true,
      "probes": [
        {
          "activity": {
            "name": "test-steady-state",
            "type": "probe",
            "tolerance": 200,
            "provider": {
              "type": "python",
              "module": "recursionVisualizer",
              "func": "steadystate",
              "arguments": {
                "i": 200
              }
            }
          },
          "output": 200,
          "status": "succeeded",
          "start": "2021-10-11T11:55:36.026544",
          "end": "2021-10-11T11:55:36.051338",
          "duration": 0.024794,
          "tolerance_met": true
        }
      ]
    },
    "during": []
  },
  "run": [
    {
      "activity": {
        "name": "test-rightfunction-testturtlemodule",
        "type": "action",
        "provider": {
          "type": "python",
          "module": "turtletest",
          "func": "right",
          "arguments": {
            "angle": "40"
          }
        }
      },
      "output": null,
      "status": "failed",
      "exception": [
        "Traceback (most recent call last):\n",
        "  File \"C:\\Users\\asunder\\.venvs\\chaostk\\lib\\site-packages\\chaoslib\\provider\\python.py\", line 55, in run_python_activity\n    return func(**arguments)\n",
        "  File \"<string>\", line 6, in right\n",
        "  File \"C:\\Users\\asunder\\Python\\Recursion Visulaizer\\turtletest.py\", line 3821, in __init__\n    Turtle._screen = Screen()\n",
        "  File \"C:\\Users\\asunder\\Python\\Recursion Visulaizer\\turtletest.py\", line 3671, in Screen\n    Turtle._screen = _Screen()\n",
        "  File \"C:\\Users\\asunder\\Python\\Recursion Visulaizer\\turtletest.py\", line 3697, in __init__\n    self._root.setupcanvas(width, height, canvwidth, canvheight)\n",
        "  File \"C:\\Users\\asunder\\Python\\Recursion Visulaizer\\turtletest.py\", line 444, in setupcanvas\n    self._canvas = ScrolledCanvas(self, width, height, cwidth, cheight)\n",
        "TypeError: __init__() takes from 1 to 3 positional arguments but 6 were given\n",
        "\nDuring handling of the above exception, another exception occurred:\n\n",
        "chaoslib.exceptions.ActivityFailed: TypeError: __init__() takes from 1 to 3 positional arguments but 6 were given\n"
      ],
      "start": "2021-10-11T11:54:55.444968",
      "end": "2021-10-11T11:54:55.530697",
      "duration": 0.085729
    },
    {
      "activity": {
        "name": "test-configdict-testturtlemodule",
        "type": "action",
        "provider": {
          "type": "python",
          "module": "turtletest",
          "func": "config_dict",
          "arguments": {
            "filename": "turtletest.py"
          }
        }
      },
      "output": {
        "_ver": "\"turtle 1.1b- - for Python 3.1   -  4. 5. 2009\"",
        "_tg_classes": "['ScrolledCanvas', 'TurtleScreen', 'Screen',",
        "_tg_screen_functions": "['addshape', 'bgcolor', 'bgpic', 'bye',",
        "_tg_turtle_functions": "['back', 'backward', 'begin_fill', 'begin_poly', 'bk',",
        "_tg_utilities": "['write_docstringdict', 'done']",
        "__all__": "[(_tg_classes + _tg_screen_functions + _tg_turtle_functions +",
        "_all_": "[\"run\",\"incrementudc\",\"init\",\"update\"]",
        "_alias_list": "['addshape', 'backward', 'bk', 'fd', 'ht', 'lt', 'pd', 'pos',",
        "_CFG": "{\"width\" : 0.5,               # Screen",
        "cfglines": "f.readlines()",
        "cfgdict": "{}",
        "line": "line.strip()",
        "key": "keys[-1]",
        "value": "int(value)",
        "cfgdict[key]": "value",
        "default_cfg": "\"turtle_%s.cfg\" % cfgdict1[\"importconfig\"]",
        "cfgdict1": "config_dict(default_cfg)",
        "cfgdict2": "config_dict(cfg_file2)",
        "head, tail": "split(__file__)",
        "cfg_file2": "",
        "perp": "Vec2D(-self[1], self[0])",
        "angle": "(angle+full/2.)%full - full/2.",
        "c, s": "math.cos(angle), math.sin(angle)",
        "baseList": "list(cls.__bases__)",
        "_dict[key]": "value",
        "_dict": "{}",
        "__stringBody": "(",
        "def __forwardmethods(fromClass, toClass, toPart, exclude": "()):",
        "_dict_1": "{}",
        "mfc": "__methods(fromClass)",
        "_dict[ex]": "_dict_1[ex]",
        "d": "{'method': method, 'func': func}",
        "execString": "\\",
        "self._rootwindow": "self.winfo_toplevel()",
        "self.width, self.height": "width, height",
        "self.canvwidth, self.canvheight": "canvwidth, canvheight",
        "self.bg": "bg",
        "orient": "TK.HORIZONTAL)",
        "self._canvas.configure(xscrollcommand": "self.hscroll.set,",
        "yscrollcommand": "self.vscroll.set)",
        "self.canvwidth": "canvwidth",
        "self.canvheight": "canvheight",
        "self._canvas.config(bg": "bg,",
        "scrollregion": "(-self.canvwidth//2, -self.canvheight//2,",
        "cwidth": "self._canvas.winfo_width()",
        "cheight": "self._canvas.winfo_height()",
        "self._canvas": "ScrolledCanvas(self, width, height, cwidth, cheight)",
        "Canvas": "TK.Canvas",
        "self.cv": "cv",
        "w": "1.0 * extent / steps",
        "h": "int(self.cv.cget(\"height\"))",
        "self.cv.config(scrollregion": "(srx1, sry1, srx2, sry2))",
        "def _drawpoly(self, polyitem, coordlist, fill": "None,",
        "cl": "[16*int(cstr[h], 16) for h in cstr[1:]]",
        "self.cv.itemconfigure(polyitem, fill": "fill)",
        "self.cv.itemconfigure(polyitem, outline": "outline)",
        "self.cv.itemconfigure(polyitem, width": "width)",
        "capstyle": "TK.ROUND)",
        "def _drawline(self, lineitem, coordlist": "None,",
        "self.cv.itemconfigure(lineitem, fill": "fill)",
        "self.cv.itemconfigure(lineitem, width": "width)",
        "rgb": "self.cv.winfo_rgb(color)",
        "ok": false,
        "def _bgcolor(self, color": "None):",
        "self.cv.config(bg": "color)",
        "x, y": "self.pos()",
        "x": "x * self.xscale",
        "y": "y * self.yscale",
        "anchor": "{\"left\":\"sw\", \"center\":\"s\", \"right\":\"se\" }",
        "x0, y0, x1, y1": "self.cv.bbox(item)",
        "def _onkeypress(self, fun, key": "None):",
        "return self.cv.create_image(0, 0, image": "image)",
        "self.cv.itemconfig(item, image": "image)",
        "pl": "[(cl[i], -cl[i+1]) for i in range(0, len(cl), 2)]",
        "items": "self.cv.find_all()",
        "coordinates": "coordinates[2:]",
        "newcoordlist": "[]",
        "width": "sw*width",
        "if width <": "1:  # the window isn't managed by a geometry manager",
        "height": "sh*height",
        "if height <": "1: # the window isn't managed by a geometry manager",
        "return simpledialog.askstring(title, prompt, parent": "self.cv)",
        "return simpledialog.askfloat(title, prompt, initialvalue": "default,",
        "parent": "self.cv)",
        "def __init__(self, type_, data": "None):",
        "self._type": "screen._shapes[shapeIndex]._type",
        "data": "item[1:]",
        "self._data": "data",
        "def addcomponent(self, poly, fill, outline": "None):",
        ">>> poly": "((0,0),(10,-5),(0,10),(-10,-5))",
        ">>> s": "Shape(\"compound\")",
        "if self._type !": "\"compound\":",
        "outline": "self._outlinewidth",
        "def __init__(self, bufsize": "10):",
        "self.bufsize": "bufsize",
        "self.buffer": "[[None]] * bufsize",
        "self.ptr": "(self.ptr - 1) % self.bufsize",
        "self.cumulate": false,
        "def reset(self, bufsize": "None):",
        "self.buffer[i]": "[None]",
        "self.buffer[self.ptr]": "[None]",
        "item": "data.pop()",
        "_RUNNING": true,
        "def __init__(self, cv, mode": "_CFG[\"mode\"],",
        "self._shapes": "{",
        "self._bgpics": "{\"nopic\" : \"\"}",
        "self._mode": "mode",
        "self._delayvalue": "int(delay)",
        "self._colormode": "int(cmode)",
        "self._keys": "[]",
        "rootwindow": "cv.winfo_toplevel()",
        "self._bgpic": "self._createimage(\"\")",
        "self._bgpicname": "picname",
        "self._tracing": "tracing",
        "self._updatecounter": 0,
        "self._turtles": "[]",
        "Turtle._pen": null,
        "def mode(self, mode": "None):",
        "mode": "mode.lower()",
        "if self.mode() !": "\"world\":",
        "xspan": "float(urx - llx)",
        "yspan": "float(ury - lly)",
        "wx, wy": "self._window_size()",
        "oldxscale, oldyscale": "self.xscale, self.yscale",
        "self.xscale": "self.canvwidth / xspan",
        "self.yscale": "self.canvheight / yspan",
        "srx1": "llx * self.xscale",
        "sry1": "-ury * self.yscale",
        "srx2": "self.canvwidth + srx1",
        "sry2": "self.canvheight + sry1",
        "def register_shape(self, name, shape": "None):",
        "shape": "shape,",
        "self._shapes[name]": "shape",
        "color": "self._colorstr(color)",
        "r, g, b": "[round(255.0*x) for x in (r, g, b)]",
        "def colormode(self, cmode": "None):",
        ">>> dist": 2,
        "...     dist +": 2,
        "def delay(self, delay": "None):",
        "TurtleScreen._RUNNING": true,
        "self._updatecounter +": 1,
        "self._updatecounter %": "self._tracing",
        "tracing": "self.screen._tracing",
        ">>> cv": "screen.getcanvas()",
        "def onkeypress(self, fun, key": "None):",
        "def ontimer(self, fun, t": "0):",
        "t -- a number >": 0,
        ">>> running": false,
        "def bgpic(self, picname": "None):",
        "self._bgpics[picname]": "self._image(picname)",
        "onscreenclick": "onclick",
        "resetscreen": "reset",
        "clearscreen": "clear",
        "addshape": "register_shape",
        "onkeyrelease": "onkey",
        "START_ORIENTATION": "{",
        "DEFAULT_MODE": "\"standard\"",
        "DEFAULT_ANGLEOFFSET": 0,
        "DEFAULT_ANGLEORIENT": 1,
        "def __init__(self, mode": "DEFAULT_MODE):",
        "self._angleOffset": "fullcircle/4.",
        "self._angleOrient": -1,
        "self.undobuffer": "Tbuffer(size)",
        "self._position": "old",
        "self._orient": "neworient",
        "def _setmode(self, mode": "None):",
        "self._fullcircle": "fullcircle",
        "self._degreesPerAU": "360/fullcircle",
        "def degrees(self, fullcircle": "360.0):",
        "ende": "self._position + self._orient * distance",
        "angle *": "self._degreesPerAU",
        "def goto(self, x, y": "None):",
        ">>> tp": "turtle.pos()",
        "def distance(self, x, y": "None):",
        ">>> pen": "Turtle()",
        "pos": "x._position",
        "def towards(self, x, y": "None):",
        "result": "round(math.atan2(y, x)*180.0/math.pi, 10) % 360.0",
        "result /": "self._degreesPerAU",
        "full": "self._fullcircle",
        "--or: circle(radius, steps": "6)         # 6-sided polygon",
        "self.undobuffer.cumulate": false,
        "speed": 0,
        "extent": "self._fullcircle",
        "frac": "abs(extent)/self._fullcircle",
        "steps": "1 + int(abs(angle)/anglevel)",
        "w2": "0.5 * w",
        "l": "max(1, self._pensize/5.0)",
        "l, w, w2": "-l, -w, -w2",
        "tr": "self._tracer()",
        "dl": "self._delay()",
        "def speed(self, s": "0):",
        "def _delay(self, n": "None):",
        "fd": "forward",
        "bk": "back",
        "backward": "back",
        "rt": "right",
        "lt": "left",
        "position": "pos",
        "setpos": "goto",
        "setposition": "goto",
        "seth": "setheading",
        "def __init__(self, resizemode": "_CFG[\"resizemode\"]):",
        "self._resizemode": "p[\"resizemode\"]",
        "def _reset(self, pencolor": "_CFG[\"pencolor\"],",
        "fillcolor": "_CFG[\"fillcolor\"]):",
        "self._pensize": "p[\"pensize\"]",
        "self._shown": "visible",
        "self._pencolor": "p[\"pencolor\"]",
        "self._fillcolor": "p[\"fillcolor\"]",
        "self._drawing": "p[\"pendown\"]",
        "self._speed": "p[\"speed\"]",
        "self._stretchfactor": "a11, a22",
        "self._shearfactor": "a12/a22",
        "self._tilt": "alfa",
        "self._shapetrafo": "(m11, m12, m21, m22)",
        "self._outlinewidth": "p[\"outline\"]",
        "def resizemode(self, rmode": "None):",
        "rmode": "rmode.lower()",
        "self.pen(resizemode": "\"user\")",
        "def pensize(self, width": "None):",
        "self.pen(pensize": "width)",
        "self.pen(pendown": "True)",
        "def speed(self, speed": "None):",
        "speeds": "{'fastest':0, 'fast':10, 'normal':6, 'slow':3, 'slowest':1 }",
        "self.pen(speed": "speed)",
        "pcolor, fcolor": "args",
        "pcolor": "self._colorstr(pcolor)",
        "fcolor": "self._colorstr(fcolor)",
        ">>> tup": "(0.2, 0.8, 0.55)",
        "self.pen(pencolor": "color)",
        ">>> col": "turtle.pencolor()",
        "self.pen(fillcolor": "color)",
        "self.pen(shown": "False)",
        "def pen(self, pen": "None, **pendict):",
        ">>> penstate": "turtle.pen()",
        ">>> p.pen(penstate, fillcolor": "\"green\")",
        "_pd": "{\"shown\"         : self._shown,",
        "p": "{}",
        "_p_buf": "{}",
        "_p_buf[key]": "_pd[key]",
        "newLine": true,
        "if self._drawing !": "p[\"pendown\"]:",
        "p[\"pencolor\"]": "self._colorstr((p[\"pencolor\"],))",
        "if self._pencolor !": "p[\"pencolor\"]:",
        "if self._pensize !": "p[\"pensize\"]:",
        "p[\"fillcolor\"]": "self._colorstr((p[\"fillcolor\"],))",
        "sf": "(sf, sf)",
        "scx, scy": "self._stretchfactor",
        "shf": "self._shearfactor",
        "sa, ca": "math.sin(alfa), math.cos(alfa)",
        "def _newLine(self, usePos": "True):",
        "up": "penup",
        "pu": "penup",
        "pd": "pendown",
        "down": "pendown",
        "st": "showturtle",
        "ht": "hideturtle",
        "self.screen": "screen",
        "screen": "self.screen",
        "self.shapeIndex": "shapeIndex",
        "self._item": "[screen._createpoly() for item in",
        "screens": "[]",
        "def __init__(self, canvas": "None,",
        "undobuffersize": "undobuffersize,",
        "visible": "visible)",
        "self.drawingLineItem": "screen._createline()",
        "self.turtle": "turtle",
        "self._poly": "[self._position]",
        "self._creatingPoly": false,
        "self._hidden_from_screen": true,
        "self.currentLineItem": "self.screen._createline()",
        "self.currentLine": "[self._position]",
        "self.items": "[self.currentLineItem]",
        "self.stampItems": "[]",
        "self._undobuffersize": "undobuffersize",
        "if size is None or size <": "0:",
        "if self.screen._updatecounter !": "0:",
        "mick": "Turtle()",
        "joe": "mick.clone()",
        "turtle": "Turtle()",
        "q": "deepcopy(self)",
        "q.screen": "screen",
        "q.turtle": "_TurtleImage(screen, self.turtle.shapeIndex)",
        "ttype": "shape._type",
        "q.turtle._item": "[screen._createpoly() for item in",
        "q.currentLineItem": "screen._createline()",
        "def shape(self, name": "None):",
        ">>> turtle.shapesize(outline": "8)",
        "stretch_wid, stretch_len": "self._stretchfactor",
        "stretchfactor": "self._stretchfactor",
        "def shearfactor(self, shear": "None):",
        "tilt": "-self._tilt * (180.0/math.pi) * self._angleOrient",
        "def tiltangle(self, angle": "None):",
        "m11, m12, m21, m22": "self._shapetrafo",
        "if t11 is not None: m11": "t11",
        "if t12 is not None: m12": "t12",
        "if t21 is not None: m21": "t21",
        "if t22 is not None: m22": "t22",
        "alfa": "math.atan2(-m21, m11) % (2 * math.pi)",
        "a11, a12, a21, a22": "(ca*m11 - sa*m21, ca*m12 - sa*m22,",
        "p0, p1": "self._position",
        "e0, e1": "(1.0 / abs(e)) * e",
        "e": "Vec2D(e0, e1 * screen.yscale / screen.xscale)",
        "def _getshapepoly(self, polygon, compound": "False):",
        "t11, t12, t21, t22": "l, 0, 0, l",
        "titem": "self.turtle._item",
        "tshape": "shape._data",
        "else: w": "self._outlinewidth",
        "fc, oc": "self._fillcolor, self._pencolor",
        "poly": "self._polytrafo(self._getshapepoly(poly, True))",
        "screen._drawpoly(item, poly, fill": "self._cc(fc),",
        "stitem": "data[0]",
        "buf": "self.undobuffer",
        "index": "buf.buffer.index(item)",
        "if index <": "buf.ptr:",
        "buf.ptr": "(buf.ptr - 1) % buf.bufsize",
        ">>> astamp": "turtle.stamp()",
        "def clearstamps(self, n": "None):",
        "toDelete": "self.stampItems[n:]",
        "elif n >": "0:",
        "go_modes": "( self._drawing,",
        "undo_entry": "(\"go\", self._position, end, go_modes,",
        "start": "old",
        "diff": "old - new",
        "diffsq": "(diff[0]*screen.xscale)**2 + (diff[1]*screen.yscale)**2",
        "nhops": "1+int((diffsq**0.5)/(3*(1.1**self._speed)*self._speed))",
        "delta": "1.0*angle/steps",
        "top": false,
        "self._update() #count": "True)",
        "old, new, go_modes, coodata": "entry",
        "drawing, pc, ps, filling": "go_modes",
        "cLI, cL, pl, items": "coodata",
        "usepc": "pc",
        "todelete": "[i for i in self.items if (i not in items) and",
        "self._fillpath": "[self._position]",
        "neworient": "self._orient.rotate(angle)",
        "anglevel": "3.0 * self._speed",
        "self.screen._drawline(self.currentLineItem, top": "True)",
        "self._fillitem": "self.screen._createpoly()",
        "fill": "self._fillcolor)",
        "def dot(self, size": "None, *color):",
        "size -- an integer >": "1 (if given)",
        "size": "self._pensize + max(self._pensize, 4)",
        "pen": "self.pen()",
        "item, end": "self.screen._write(self._position, txt, align, font,",
        "end": "self._write(str(arg), align.lower(), font)",
        ">>> p": "turtle.get_poly()",
        ">>> ts": "turtle.getscreen()",
        ">>> pet": "getturtle()",
        "getpen": "getturtle",
        "def _delay(self, delay": "None):",
        ">>> joe": "MyTurtle()",
        "angle, degPAU": "data",
        "dummy": "self.undobuffer.pop()",
        "action": "item[0]",
        "turtlesize": "shapesize",
        "RawPen": "RawTurtle",
        "Turtle._screen": "Screen()",
        "_root": null,
        "_canvas": null,
        "_title": "_CFG[\"title\"]",
        "canvwidth": "_CFG[\"canvwidth\"]",
        "canvheight": "_CFG[\"canvheight\"]",
        "leftright": "_CFG[\"leftright\"]",
        "topbottom": "_CFG[\"topbottom\"]",
        "_Screen._canvas": null,
        "Default, startx": "None is to center window horizontally.",
        "Default, starty": "None is to center window vertically.",
        "sw": "self._root.win_width()",
        "sh": "self._root.win_height()",
        "startx": "(sw - width) / 2",
        "starty": "(sh - height) / 2",
        "_Screen._title": "titlestring",
        "root": "self._root",
        "_Screen._root": null,
        "_pen": null,
        "_screen": null,
        "Pen": "Turtle",
        "def write_docstringdict(filename": "\"turtle_docstringdict\"):",
        "docsdict": "module.docsdict",
        "docsdict[key]": "eval(key).__doc__",
        "keys": "sorted(x for x in docsdict",
        "f.write('docsdict": "{\\n\\n')",
        "modname": "\"turtle_docstringdict_%(language)s\" % {'language':lang.lower()}",
        "module": "__import__(modname)",
        "eval(key).__doc__": "docsdict[key]",
        "_LANGUAGE": "_CFG[\"language\"]",
        "if _LANGUAGE !": "\"english\":",
        "args, varargs, varkw": "inspect.getargs(ob.__code__)",
        "items2": "args[1:]",
        "realArgs": "args[1:]",
        "defaults": "[\"\"] * (len(realArgs)-len(defaults)) + defaults",
        "items1": "[arg + dflt for arg, dflt in zip(realArgs, defaults)]",
        "defText": "\"(%s)\" % defText",
        "callText": "\"(%s)\" % callText",
        "turtlename": "_CFG[\"exampleturtle\"]",
        "newdocstr": "parexp.sub(\":\", newdocstr)",
        "parexp": "re.compile(r' \\(.+ %s\\):' % screenname)",
        "screenname": "_CFG[\"examplescreen\"]",
        "__func_body": "\"\"\"\\",
        "{obj}": "{init}",
        "method": "getattr(cls, methodname)",
        "pl1, pl2": "getmethparlist(method)",
        "globals()[methodname].__doc__": "docrevise(method.__doc__)",
        "done": "mainloop",
        "radius": "distance(0, 0)/2.0",
        "laenge": 10,
        "laenge +": 10,
        "tri": "getturtle()",
        "count": 1,
        "count +": 1,
        "tri.write(\"  Click me!\", font": "(\"Courier\", 12, \"bold\") )"
      },
      "status": "succeeded",
      "start": "2021-10-11T11:54:55.530697",
      "end": "2021-10-11T11:54:55.597614",
      "duration": 0.066917
    },
    {
      "activity": {
        "type": "action",
        "name": "test-turtle-forward-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "forward",
          "arguments": {
            "distance": 20
          }
        },
        "pauses": {
          "after": 10
        }
      },
      "output": null,
      "status": "succeeded",
      "start": "2021-10-11T11:54:55.598692",
      "end": "2021-10-11T11:54:55.659401",
      "duration": 0.060709
    },
    {
      "activity": {
        "type": "action",
        "name": "test-turtle-backward-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "backward",
          "arguments": {
            "distance": 20
          }
        },
        "pauses": {
          "after": 10
        }
      },
      "output": null,
      "status": "succeeded",
      "start": "2021-10-11T11:55:05.670854",
      "end": "2021-10-11T11:55:05.746152",
      "duration": 0.075298
    },
    {
      "activity": {
        "type": "action",
        "name": "test-turtle-left-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "left",
          "arguments": {
            "angle": 45
          }
        },
        "pauses": {
          "after": 10
        }
      },
      "output": null,
      "status": "succeeded",
      "start": "2021-10-11T11:55:15.750832",
      "end": "2021-10-11T11:55:15.874540",
      "duration": 0.123708
    },
    {
      "activity": {
        "type": "action",
        "name": "test-turtle-right-module",
        "provider": {
          "type": "python",
          "module": "turtle",
          "func": "right",
          "arguments": {
            "angle": 45
          }
        },
        "pauses": {
          "after": 10
        }
      },
      "output": null,
      "status": "succeeded",
      "start": "2021-10-11T11:55:25.879429",
      "end": "2021-10-11T11:55:25.987927",
      "duration": 0.108498
    },
    {
      "activity": {
        "name": "test-steady-state",
        "type": "probe",
        "tolerance": 200,
        "provider": {
          "type": "python",
          "module": "recursionVisualizer",
          "func": "steadystate",
          "arguments": {
            "i": 200
          }
        }
      },
      "output": 200,
      "status": "succeeded",
      "start": "2021-10-11T11:55:35.991650",
      "end": "2021-10-11T11:55:36.021537",
      "duration": 0.029887
    }
  ],
  "rollbacks": [],
  "end": "2021-10-11T11:55:36.052314",
  "duration": 40.62901592254639
}